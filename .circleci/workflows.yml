version: 2.1

parameters:
    image-data-modified:
        type: boolean
        default: false   
    not-image-related:
        type: boolean
        default: false   

jobs:
  #
  # Build and Test docker images
  #
  build-and-test:
    machine:
      image: ubuntu-2204:2023.02.1

      # This job has been blocked because Docker Layer Caching is not available on your plan.
      # Should upgrade if necessary.
      docker_layer_caching: false

    steps:
      - checkout

      - run:
          name: Context Info Cmds
          command: pwd && ls -ltra && git branch

      - run:
          name: Initialize Repo Makefiles
          command: |
            make init-makefiles
            git update-index --assume-unchanged "Makefile"

      - run:
          name: Docker Hub Login
          command: docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS

      - run:
          name: Run docker images tests
          command: |
            for v in $(cat versions_to_build ) ;
            do
                if [[ ! "$v" =~ ^#.* ]];
                then
                  echo "Building and testing $v...";
                  LOCALVER=($(echo "$v" | tr '-' ' '))
                  make test-all LEVERAGE_CLI_TAG=${LOCALVER[-1]} TOFU_TAG=${LOCALVER[0]}
                fi
            done

  #
  # Push docker images
  #
  push-images:
    machine:
      image: ubuntu-2204:2023.02.1

      # This job has been blocked because Docker Layer Caching is not available on your plan.
      # Should upgrade if necessary.
      docker_layer_caching: false

    steps:
      - add_ssh_keys:
          fingerprints:
              - "96:3c:7c:62:49:17:fc:20:50:c9:d1:34:15:81:25:7b"

      - checkout

      - run:
          name: Context Info Cmds
          command: pwd && ls -ltra && git branch

      - run:
          name: Initialize Repo Makefiles
          command: |
            make init-makefiles
            git update-index --assume-unchanged "Makefile"

      - run:
          name: Docker Hub Login
          command: echo "$DOCKER_HUB_PASS" | docker login -u $DOCKER_HUB_USER --password-stdin

      - run:
          name: Build && Push docker images
          command: |
            for v in $(cat versions_to_build ) ;
            do
                if [[ ! "$v" =~ ^#.* ]];
                then
                  echo "Building $v...";
                  LOCALVER=($(echo "$v" | tr '-' ' '))
                  make push-all LEVERAGE_CLI_TAG=${LOCALVER[1]} TOFU_TAG=${LOCALVER[0]}
                fi
            done

          no_output_timeout: 30m

      - slack/notify:
          event: fail
          mentions: '@leverage-support'
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Failed Pipeline! :rotating_light::fire::bash-fire::bangbang::video-games-doom-mad::stopp:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":negative_squared_cross_mark: *Project*: $CIRCLE_PROJECT_REPONAME \n :negative_squared_cross_mark: *User*: $CIRCLE_USERNAME \n :negative_squared_cross_mark: *Job*: $CIRCLE_JOB in *repo* $CIRCLE_PROJECT_REPONAME \n :negative_squared_cross_mark: *Branch:* $CIRCLE_BRANCH \n :negative_squared_cross_mark: *PR:* $CIRCLE_PULL_REQUEST \n :negative_squared_cross_mark: *Last Commit:* $CIRCLE_SHA1"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": ":arrow_forward: View Job in CircleCi",
                      "emoji": true
                    },
                    "value": "click_me_123",
                    "url": "$CIRCLE_BUILD_URL",
                    "action_id": "button-action"
                  }
                }
              ]
            }
          channel: 'tools-ci'
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Successful Pipeline! :checkered_flag: :video-games-star: :video-games-mario-luigi-dance: :tada: :binbash::bb-leverage: :heart: :open-source:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":heavy_check_mark: *Project*: $CIRCLE_PROJECT_REPONAME \n :heavy_check_mark: *User*: $CIRCLE_USERNAME \n :heavy_check_mark: *Job*: $CIRCLE_JOB in *repo* $CIRCLE_PROJECT_REPONAME \n :heavy_check_mark: *Branch:* $CIRCLE_BRANCH \n :heavy_check_mark: *PR:* $CIRCLE_PULL_REQUEST \n :heavy_check_mark: *Last Commit:* $CIRCLE_SHA1"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": ":arrow_forward: View Job in CircleCi",
                      "emoji": true
                    },
                    "value": "click_me_123",
                    "url": "$CIRCLE_BUILD_URL",
                    "action_id": "button-action"
                  }
                }
              ]
            }
          channel: 'tools-ci'

#
# CircleCI orbs are open-source, shareable packages of parameterizable reusable
# configuration elements, including jobs, commands, and executors.
#
orbs:
  sumologic: circleci/sumologic@1.0.6
  slack: circleci/slack@4.1.1

#
# Jobs workflow
#
workflows:
  version: 2
  test_and_release:
    when: << pipeline.parameters.image-data-modified >>
    jobs:
      - build-and-test:
          context: binbashar-org-global-context
          filters:
            branches:
             ignore: # only branches matching the below regex filters will run
               - master
      - push-images:
          context: binbashar-org-global-context
          filters:
            branches:
             only: # only branches matching the below regex filters will run
               - master
  #sumo_test:
  #  when:
  #      or:
  #      - << pipeline.parameters.not-image-related >>
  #      - << pipeline.parameters.image-data-modified >>
  #  jobs:
  #    - sumologic/workflow-collector:
  #        context: binbashar-org-global-context
